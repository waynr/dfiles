on: [push, pull_request]
name: main test

jobs:
  check-fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  check-clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  build-setup:
    runs-on: ubuntu-latest
    outputs:
      app-names: ${{ steps.get-app-names.outputs.app-names }}
    steps:
      - name: check out repository
        uses: actions/checkout@v3
      - name: pip install the python yq that comes with tomlq
        run: |
          pip install yq
      - id: get-app-names
        run: |
          echo "app-names=\"$(tomlq -c '.workspace.members[]' Cargo.toml)\"" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ubuntu-latest
    needs: build-setup
    strategy:
      matrix:
        app: ${{ needs.build-setup.outputs.app-names }}
    steps:
      - name: check out repository
        uses: actions/checkout@v3
      - name: extract app name from matrix variable
        id: get-name
        run: |
          echo "app-name=$(echo ${{matrix.app}} | cut -d\/ -f2)" >> "$GITHUB_OUTPUT"
      - name: build
        run: |
          cargo build -p ${{ steps.get-name.outputs.app-name }}
          ./target/debug/${{ steps.get-name.outputs.app-name }} build
